"""
В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых.
Не учитывать знаки препинания и регистр символов. За основу возьмите любую статью из википедии или
из документации к языку.
"""

text = 'В идеале автор полностью пишет текст «из головы», основываясь на собственных знаниях и опыте. ' \
       'Однако так происходит далеко не всегда. Существует такое понятие, как рерайтинг. При этом райтер берет ' \
       'какую-то определенную статью из интернета и пересказывает ее своими словами, подбирает синонимы, меняет ' \
       'местами предложения. Такой текст технически получится уникальным, но пользы читателям от него будет немного, ' \
       'ведь содержание статьи полностью повторяет текст, который уже был где-то опубликован. Поэтому наиболее ' \
       'распространенным методом является совмещение этих двух способов: на основе материалов из нескольких ' \
       'источников в сочетании с собственными мыслями по теме пишется уникальный авторский текст. В начале работы ' \
       'над статьей автор должен обдумать идею текста, четко понять его цель. Можно написать статью на основе своих ' \
       'интересов, но не факт, что такой текст заинтересует посетителей сайта. Статья должна решать проблему ' \
       'читателей или сообщать им что-то новое, поэтому семантика чаще основывается на информационных запросах ' \
       'пользователей, собранных с помощью поисковиков Яндекс, Google или таких сервисов, как Яндекс.Wordstat.'

temp_text = text.split()
extra_char = ['.', ',', '«', '»', ':']
for i in range(len(temp_text)):
    for j in range(len(extra_char)):
        if extra_char[j] in temp_text[i]:
            temp_text[i] = temp_text[i].replace(extra_char[j], '')

count_word = {}
for word in temp_text:
    count_word[word.lower()] = text.count(word)
sort_tuple = sorted(count_word.items(), key=lambda x: x[1], reverse=True)
for i in range(10):
    print(f'{sort_tuple[i][0]} = {sort_tuple[i][1]}', sep='\n')
